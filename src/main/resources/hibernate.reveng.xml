<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-reverse-engineering PUBLIC "-//Hibernate/Hibernate Reverse Engineering DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-reverse-engineering-3.0.dtd" >

<!-- XXX: https://eugencovaciq.wordpress.com/2016/02/01/hibernate-tools-reverse-engineering-using-maven/ -->
<!-- XXX: https://stackoverflow.com/questions/44480415/where-is-the-reverse-engineering-feature-in-hibernate5 -->
<!-- XXX: http://www.lostinsoftware.com/2015/08/reverse-engineering-and-code-generation/ -->
<hibernate-reverse-engineering>
<!-- XXX: https://coderanch.com/t/461063/databases/sample-hibernate-configataion-files -->
<type-mapping> 
<!-- jdbc-type is name fom java.sql.Types --> 
<sql-type jdbc-type="CHAR" hibernate-type="java.lang.String" /> 
<sql-type jdbc-type="VARCHAR" hibernate-type="java.lang.String" /> 
<sql-type jdbc-type="BIT" hibernate-type="java.lang.Boolean" /> 
<sql-type jdbc-type="TINYINT" hibernate-type="java.lang.Short" /> 
<sql-type jdbc-type="SMALLINT" hibernate-type="java.lang.Short" /> 
<sql-type jdbc-type="INTEGER" hibernate-type="java.lang.Integer" /> 
<sql-type jdbc-type="BIGINT" hibernate-type="java.lang.Long" /> 
<sql-type jdbc-type="DOUBLE" hibernate-type="java.lang.Double" /> 
<sql-type jdbc-type="FLOAT" hibernate-type="java.lang.Double" /> 
<sql-type jdbc-type="DECIMAL" hibernate-type="java.lang.Long" /> 
<sql-type jdbc-type="NUMERIC" hibernate-type="java.lang.Long" /> 
<sql-type jdbc-type="TIMESTAMP" hibernate-type="java.sql.Timestamp" /> 
<sql-type jdbc-type="TIME" hibernate-type="java.sql.Time" /> 
<sql-type jdbc-type="DATE" hibernate-type="java.util.Date" /> 

</type-mapping> 

	<table-filter match-schema="public"
		match-name="factura_vigente" />
	<table-filter match-schema="public"
		match-name="factura" />
	<table-filter match-schema="public"
		match-name=".*_factura" />
	<table-filter match-schema="public"
		match-name="declaracion.*" />

	<table schema="public" name="factura_vigente">
		<meta attribute="extra-import">java.util.stream.Collectors</meta>
		<meta attribute="extra-import">java.util.List</meta>
		<meta attribute="extra-import">javax.persistence.Transient</meta>
		<meta attribute="extra-import">org.apache.commons.lang3.builder.ToStringBuilder</meta>


		<meta attribute="class-code">
        <![CDATA[
// Aca nomas probando controla la autodegeneracion con <<class-code >>
// TODO: https://stackoverflow.com/questions/2653268/what-are-the-shortcut-to-auto-generating-tostring-method-in-eclipse
public String toString() { return ToStringBuilder.reflectionToString(this); }
        ]]>
		</meta>
		<primary-key>
			<generator class="identity"></generator>
			<key-column name="id" />
		</primary-key>
		<column name="folio" type="string">
			<meta attribute="pre-cond">
				// Aqui nomas probando controlar la degeneracion por plantillas &amp;&amp; 
				
				
			</meta>
		</column>
	</table>
	<table schema="public" name="monto_factura_vigente">
		<primary-key>
			<generator class="identity"></generator>
			<key-column name="id" />
		</primary-key>
	</table>
	
	<table schema="public" name="monto_factura">
		<primary-key>
			<generator class="identity"></generator>
			<key-column name="id" />
		</primary-key>
	</table>
	<table schema="public" name="monto_deducible_factura">
		<primary-key>
			<generator class="identity"></generator>
			<key-column name="id" />
		</primary-key>
	</table>
	<table schema="public" name="fecha_inicio_depreciacion_factura">
		<primary-key>
			<generator class="identity"></generator>
			<key-column name="id" />
		</primary-key>
	</table>
	<table schema="public" name="porcentaje_depreciacion_anual_factura">
		<primary-key>
			<generator class="identity"></generator>
			<key-column name="id" />
		</primary-key>
	</table>
	<table schema="public" name="factura">
		<primary-key>
			<generator class="identity"></generator>
			<key-column name="id" />
		</primary-key>
	</table>
	<table schema="public" name="declaracion_factura">
		<meta attribute="extra-import">org.apache.commons.lang3.builder.ToStringBuilder</meta>
		<meta attribute="extra-import">org.nada.models.FacturaVigente</meta>
		<meta attribute="extra-import">org.nada.models.FacturaVigenteExtendida</meta>
		<meta attribute="extra-import">javax.persistence.OneToOne</meta>
		<meta attribute="extra-import">javax.persistence.Transient</meta>
		<meta attribute="class-code">
        <![CDATA[
// Aca nomas probando controla la autodegeneracion con <<class-code >>
// TODO: https://stackoverflow.com/questions/2653268/what-are-the-shortcut-to-auto-generating-tostring-method-in-eclipse
public String toString() { return ToStringBuilder.reflectionToString(this); }

	private DeclaracionVigente declaracionVigente;

	@ManyToOne(targetEntity = DeclaracionVigente.class)
	@JoinColumn(name = "id_declaracion", updatable = false, insertable = false)
	public DeclaracionVigente getDeclaracionVigente() {
		return declaracionVigente;
	}

	public void setDeclaracionVigente(DeclaracionVigente declaracionVigente) {
		this.declaracionVigente = declaracionVigente;
	}

private FacturaVigente facturaVigente;
	private FacturaVigenteExtendida facturaVigenteExtendida;

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_factura", updatable = false, insertable = false)
	public FacturaVigente getFacturaVigente() {
		return facturaVigente;
	}

	public void setFacturaVigente(FacturaVigente facturaVigente) {
		this.facturaVigente = facturaVigente;
	}
        
		
  // end of extra code specified in the hbm.xml files

	@Transient
	public FacturaVigenteExtendida getFacturaVigenteExtendida() {
		if (facturaVigenteExtendida == null) {
			facturaVigenteExtendida = new FacturaVigenteExtendida(getFacturaVigente());
		}
		return facturaVigenteExtendida;
	}


        ]]>
		</meta>
		<primary-key>
			<generator class="identity"></generator>
			<key-column name="id" />
		</primary-key>
	</table>
	<table schema="public" name="declaracion_vigente">

		<meta attribute="extra-import">org.apache.commons.lang3.builder.ToStringBuilder</meta>
		<meta attribute="extra-import">import java.util.Set</meta>
		<meta attribute="extra-import">import javax.persistence.OneToMany</meta>
		<meta attribute="class-code">
        <![CDATA[
// Aca nomas probando controla la autodegeneracion con <<class-code >>
// TODO: https://stackoverflow.com/questions/2653268/what-are-the-shortcut-to-auto-generating-tostring-method-in-eclipse
public String toString() { return ToStringBuilder.reflectionToString(this); }

	private Set<DeclaracionFactura> declaracionFacturas;

	@OneToMany(mappedBy = "declaracionVigente", targetEntity = DeclaracionFactura.class)
	public Set<DeclaracionFactura> getDeclaracionFacturas() {
		return declaracionFacturas;
	}

	public void setDeclaracionFacturas(Set<DeclaracionFactura> declaracionFacturas) {
		this.declaracionFacturas = declaracionFacturas;
	}

        ]]>
		</meta>
		<primary-key>
			<generator class="identity"></generator>
			<key-column name="id" />
		</primary-key>
		<column name="folio" type="string">
			<meta attribute="pre-cond">
				// Aqui nomas probando controlar la degeneracion por plantillas &amp;&amp; 
				
				
			</meta>
		</column>
	</table>

	<table schema="public" name="declaracion">
		<primary-key>
			<generator class="identity"></generator>
			<key-column name="id" />
		</primary-key>
	</table>
	<table schema="public" name="concepto_factura">
		<primary-key>
			<generator class="identity"></generator>
			<key-column name="id" />
		</primary-key>
	</table>
	<table schema="public" name="impuestos_concepto_factura">
		<primary-key>
			<generator class="identity"></generator>
			<key-column name="id" />
		</primary-key>
	</table>
</hibernate-reverse-engineering>